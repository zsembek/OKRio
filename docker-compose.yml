version: "3.9"

services:
  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    ports:
      - "5173:5173"
    depends_on:
      backend:
        condition: service_started

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    command: uvicorn app.main:app --host 0.0.0.0 --port 8070
    ports:
      - "8070:8070"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    command: celery -A app.core.celery_app.celery_app worker -l info
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    command: celery -A app.core.celery_app.celery_app beat -l info
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started

  postgres:
    # Pin to a pre-OCI release to keep compatibility with docker-compose v1
    image: postgres:15.3-alpine3.17
    environment:
      POSTGRES_DB: okrio
      POSTGRES_USER: okrio
      POSTGRES_PASSWORD: okrio
      PGPORT: 5439
    command: ["postgres", "-c", "port=5439"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U okrio -p 5439"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.0.12-alpine3.17
    ports:
      - "6379:6379"

  rabbitmq:
    image: rabbitmq:3.11.28-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"

volumes:
  frontend_node_modules:
    driver: local
  postgres_data:
    driver: local
